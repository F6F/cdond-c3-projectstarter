version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowId:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "removing env.: <<parameters.workflowId>> "
            #aws cloudformation delete-stack --stack-name udapeople-backend-prod-<<parameters.workflowId>>
            #aws s3 rm s3://udapeople-prod-<<parameters.workflowId>> --recursive
            #aws cloudformation delete-stack --stack-name udapeople-frontend-prod-<<parameters.workflowId>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #- restore_cache:
      #    keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend 
            npm i
            npm --version
            npm audit fix
            npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/node_modules

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Build back-end
          command: |
            cd backend
            npm i
            npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/node_modules
      - store_artifacts:
          path: /home/circleci/.npm/_logs/
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: npm i --prefix frontend
      - run: npm run test --prefix frontend

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: npm i --prefix backend
      - run: npm run test --prefix backend
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm audit fix --audit-level=critical --force --prefix frontend
      - run: npm audit --audit-level=critical --force --prefix frontend

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: scan Backen
          command: |
            cd backend
            npm i
            npm run build
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Bring up Backend Infra
          command: |
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/backend_infra.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: save ip
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_AWS_PUBLIC_IP:3030" >> .circleci/outputs/backendIP.txt
            echo "[all]" >> .circleci/ansible/inventory.txt
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/outputs/backendIP.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/backendIP.txt
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the frontend infrastructure using cloudformation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/frontend_infra.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"


  deploy-backend-artifact:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm ansible zip
            pip install awscli
      - run:
          name: pack Backend
          command: |
            cd ~/project/backend
            npm i
            npm run build
            cp package.json dist
            zip -rq backend.zip *
            mkdir -p ~/project/.circleci/ansible/roles/deploy-backend/files/
            mv backend.zip ~/project/.circleci/ansible/roles/deploy-backend/files/
      - add_ssh_keys:
          fingerprints: [ "45:dd:eb:a8:8f:f8:fc:f9:fb:87:e9:71:04:b2:87:58" ]
      - run:
          name: Setup EC2 instance & copy compiled backend to the EC2 instance
          command: |
            ls ~/project/.circleci/ansible/roles/deploy-backend/files/
            cat ~/project/.circleci/ansible/inventory.txt
            cd ~/project/backend
            echo "files in project/backend folder"
            ls -la 
            ansible-galaxy install weareinteractive.environment
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/playbook.yml
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations

  package-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Package frontend app
          command: |
            export API_URL=`cat .circleci/outputs/backendIP.txt`
            echo "API_URL: $API_URL"
            cd ~/project/frontend
            npm i
            npm install typescript@rc
            npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations

  deploy-frontend-artifact:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl tar
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Copy frontend to s3 bucket.
          command: |
            cd ~/project/frontend
            aws s3 cp dist s3://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run DB migrations
          command: |
            cd backend
            npm run migrations >> migration_output.txt
            cat migration_output.txt
      - run:
          name: Store migration result in a file.
          command: |
            cd backend
            if grep -q "has been executed successfully." migration_output.txt
            then
              touch ~/project/.circleci/outputs/db_migration_success
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"  

  smoke-test-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Package frontend app
          command: |
            if curl -s http://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/ | grep "Welcome"
            then
            echo "http://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/"
            return 0
            else
            return 1
            fi
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations

  smoke-test-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Test backend app.
          command: |
            API_URL=`cat .circleci/outputs/backendIP.txt`
            echo $API_URL
            curl -s $API_URL/api/status
      #- destroy-environment:
          #workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
      #- revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the backend infrastructure using cloudformation
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`UdapeopleWorkflowID\`].Value" \
              --no-paginate --output text)
            echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID."
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            printf '%s\n' "${STACKS[@]}"
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/cloudfront_infrastructure.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-cloudfront
            if printf '%s\n' "${STACKS[@]}" | grep -q "$OLD_WORKFLOW_ID"; then
              echo "Removing previous stack"
              aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
            fi
      - destroy-environment:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations


workflows:
  superDepoly:
    jobs:
      #- build-frontend
      - build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      #- package-frontend:
      #    requires: [deploy-frontend-infrastructure]
      - deploy-infrastructure-backend:
          requires: [test-backend]
      #- deploy-frontend-infrastructure:
      #    requires: 
      #      - scan-frontend
      #      - build-frontend
      - deploy-backend-artifact:
          requires:
            - deploy-infrastructure-backend
      #- run-migrations:
      #    requires:
      #      - test-backend
      #      - test-frontend
      #- deploy-frontend-artifact:
      #    requires:
      #      - package-frontend
      #      - run-migrations
      #- smoke-test-frontend:
      #    requires:
      #      - deploy-frontend-artifact
      #      - run-migrations
      - smoke-test-backend:
          requires:
            - deploy-backend-artifact
      #      - run-migrations

      #- cloudfront-update:
      #    requires:
      #      - smoke-test-frontend
      #      - smoke-test-backend
#      - cleanup:
#          requires: [cloudfront-update]#