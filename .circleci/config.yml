version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks and S3 bucket given a workflow ID.   
    parameters:
      event:
        type: string
     # workflow_id:
     #   type: string 
    steps:
      - run:
          name: Destroy environments
          when: << parameters.event >>
          command: |
            # Your code here                        
            # aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
            FRONTEND=$(curl -H "token: f8c96b04-eedf-4709-a46e-a229beb2abb0" --request GET https://api.memstash.io/values/frontend_${CIRCLE_WORKFLOW_ID:0:7})
            if [[ $FRONTEND == 1 ]];
            then
              echo "delete s3 'udapeople-${CIRCLE_WORKFLOW_ID:0:7}' content"
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            fi
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    parameters:
      event:
        type: string
     # workflow_id:
     #   type: string 
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: << parameters.event >>
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable            
            echo "Revert migrations started..."
            SUCCESS=$(curl -H "token: f8c96b04-eedf-4709-a46e-a229beb2abb0" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if [[ $SUCCESS == 1 ]];
            then
              echo "roll back migration started"
              cd ~/project/backend
              npm install
              npm run migrations:revert
              echo "roll back migration completed"
            fi
             echo "Revert migrations finish..."
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             # exit 1
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end 
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan back-end 
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end 
          command: |
            cd backend
            npm install
            npm install --save-dev ts-loader@9.2.6
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            echo `cat .circleci/ansible/inventory.txt`      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
        - image: python:3.7-alpine3.11
    steps:
        - checkout
        - add_ssh_keys:
            fingerprints: [ "45:dd:eb:a8:8f:f8:fc:f9:fb:87:e9:71:04:b2:87:58" ]
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              apk update
              apk upgrade
              apk add unzip 
              apk add curl
              /usr/local/bin/python -m pip install --upgrade pip                    
        - run:
            name: Install ansible
            command: |
              apk add --update ansible 
              ansible --version
        - run:
            name: Install aws
            command: |
              pip install awscli --upgrade   
              aws --version       
        - run:
            name: Configure server
            command: |
              cd .circleci/ansible/ 
              ansible-playbook -i inventory.txt configure-server.yml
        - run:
            name: Install node_exporter
            command: |
              cd .circleci/ansible/
              ansible-playbook -i inventory.txt add-node-exporter.yml
              
        # Here's where you will add some code to rollback on failure   
        - destroy-environment:
              event: on_fail

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            echo "migration Result:"
            echo `cat migrations_dump.txt`
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "migration was not created"
              curl -H "Content-Type: text/plain" -H "token: f8c96b04-eedf-4709-a46e-a229beb2abb0" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
 
        - checkout
        - add_ssh_keys:
            fingerprints: [ "45:dd:eb:a8:8f:f8:fc:f9:fb:87:e9:71:04:b2:87:58" ]
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              apk update
              apk upgrade
              apk add unzip 
              apk add curl
              /usr/local/bin/python -m pip install --upgrade pip    
        - run:
            name: Install node
            command: |
              apk add --update nodejs nodejs-npm
              node --version
              npm --version
        - run:
            name: Install ansible
            command: |
              # your code here              
              apk add --update ansible 
              ansible --version
        - run:
            name: Install aws
            command: |
              pip install awscli --upgrade   
              aws --version       
        - run:
            name: Deploy backend
            command: |
              echo "cd backend -------"
              cd backend
              echo "npm install -------"
              npm i
              npm run build
              cd ..
              echo "zip the directory -------"
              tar -C backend -czvf artifact.tar.gz .
              echo "mv artifac to ansibble -------"
              mv artifact.tar.gz .circleci/ansible/
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml
        - revert-migrations:
            event: on_fail
            
        - destroy-environment:
            event: on_fail
  
  deploy-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: update
          command: |  
            sudo apt update && sudo apt upgrade            
            sudo apt install curl
      - run:
          name: Install aws
          command: |                        
            sudo apt-get install python python-pip
            sudo pip install awscli
            aws --version
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text) 
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations:
          event: on_fail
      - destroy-environment:
          event: on_fail
      - run:
          name: Build Success
          when: on_success
          command: |
            curl -H "Content-Type: text/plain" -H "token: f8c96b04-eedf-4709-a46e-a229beb2abb0" --request PUT --data "1" https://api.memstash.io/values/frontend_${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: update
          command: |  
            sudo apt install curl unzip python3 python python-pip  
            sudo pip install awscli

      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi

      - revert-migrations:
          event: on_fail
      - destroy-environment:
          event: on_fail


  cloudfront-update:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Update cloudfront distribution
            command: |
              export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`OldWorkflowID\`].Value" --no-paginate --output text)
              OldWorkflowID=${OldWorkflowID#udapeople-}
              export CurrentWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
              CurrentWorkflowID=${CurrentWorkflowID#udapeople-}
              echo CurrentWorkflowID: "${CurrentWorkflowID}"
              echo newWorkFlowId: "${CIRCLE_WORKFLOW_ID:0:7}"
              echo OldWorkflowID: "${OldWorkflowID}"  
                   
              if [[ $OldWorkflowID = EMPTY ]] 
              then             
                echo "Oldworkflow is InitialStack"
                OldWorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"                
              else
                OldWorkflowID=$CurrentWorkflowID
              fi
              
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" OldWorkflowID="${OldWorkflowID}" \
                --tags project=udapeople

#cleanup:
#    docker:
#      # Docker image here
#    steps:
#      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
#            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
#              # your code here
#            fi
#            
#
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - deploy-infrastructure
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations
      - deploy-frontend:
          requires: [run-migrations, configure-infrastructure, scan-frontend]
      - deploy-backend:
          requires: [run-migrations, configure-infrastructure, scan-backend]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]